extends javascript-es6

snippet #f
/* @flow */
endsnippet

snippet ir
import React from 'react';
endsnippet

snippet irp
import PropTypes from 'prop-types';
endsnippet

snippet ird
import ReactDOM from 'react-dom';
endsnippet

snippet import_t "Import enzyme test libraries"
import expect from 'expect';
import React from 'react';
import {mount, shallow} from 'enzyme';
import $1 from '${2:./$1}';
endsnippet

snippet import_tm "Import mocks"
import thunk from 'redux-thunk';
import nock from 'nock';
import configureMockStore from 'redux-mock-store';
endsnippet

snippet cdm
componentDidMount() {
  ${1}
}
endsnippet

snippet cdup
componentDidUpdate(prevProps, prevState) {
  ${1}
}
endsnippet

snippet cwm
componentWillMount() {
  ${1}
}
endsnippet

snippet cwr
componentWillReceiveProps(nextProps) {
  ${1}
}
endsnippet

snippet cwun
componentWillUnmount() {
  ${1}
}
endsnippet

snippet cwu
componentWillUpdate(nextProps, nextState) {
  ${1}
}
endsnippet

snippet fup
forceUpdate(${1:callback});
endsnippet

snippet dp
static defaultProps = {
  ${1}: ${2},
}
endsnippet

snippet st
state = {
  ${1}: ${2},
}
endsnippet

snippet spt
static propTypes = {
  ${1}: React.PropTypes.${2:type},
}
endsnippet

snippet pt
${1:Component}.propTypes = {
  ${2:prop}: PropTypes.${3:type},
};
endsnippet

snippet rc
const ${1} = ({$2}) => {
  return (
    ${0:<div />}
  );
};
endsnippet

snippet rcc
class ${1:ClassName} extends React.Component {
  render() {
    return (
      ${0:<div />}
    );
  }
}
endsnippet

snippet rccp
class ${1:ClassName} extends React.PureComponent {
  render() {
    return (
      ${0:<div />}
    );
  }
}
endsnippet

snippet rdr
ReactDOM.render(${1}, ${2})
endsnippet

snippet ercc
  export default class ${1:ClassName} extends React.Component {
    render() {
      return (
          ${0:<div />}
          );
    }
  }
endsnippet

snippet ctor
constructor() {
  super();
  ${1}
}
endsnippet

snippet ctorp
constructor(props) {
  super(props);
  ${1}
}
endsnippet

snippet ren
render() {
  return (
      ${1:<div />}
      );
}
endsnippet

snippet sst
this.setState({
  ${1}: ${2}
});
endsnippet

snippet scu
shouldComponentUpdate(nextProps, nextState) {
  ${1}
}
endsnippet

snippet prp
this.props.${1}
endsnippet

snippet ste
this.state.${1}
endsnippet

snippet mapstp
function mapStateToProps(state, ownProps) {
  return {
    $0
  };
}
endsnippet

snippet mapdtp
function mapDispatchToProps(dispatch) {
  return {
    $0
  };
}
endsnippet
