"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  PLUGIN CONFIGURATION
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" VimWiki {{{
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

let g:vimwiki_global_ext = 0
"let g:vimwiki_ext2syntax = {}

" }}}
"
" EchoDoc {{{
let g:echodoc_enable_at_startup = 1
" }}}

" VMATH {{{
vmap <silent><expr> ++  VMATH_YankAndAnalyse()
nmap <silent>       ++  vip++
" }}}

" nvim-typescript {{{
"let g:nvim_typescript#javascript_support = 1
let g:nvim_typescript#max_completion_detail=100
" }}}

" EasyMotion {{{
let g:EasyMotion_smartcase = 1
" Move to word
map  <Leader><Leader>w <Plug>(easymotion-bd-w)
map  <Leader>f <Plug>(easymotion-bd-w)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
" Move to line
map <Leader><Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader><Leader>l <Plug>(easymotion-overwin-line)
" }}}

" NERDTree {{{
map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
map <leader>e :NERDTreeFind<CR>

let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.\.$', '\.$', '\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDTreeChDirMode=0
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let NERDTreeQuitOnOpen=1
let g:nerdtree_tabs_open_on_gui_startup=0

" }}}

" FZF {{{
command! FZFMru call fzf#run({
\  'source':  v:oldfiles,
\  'sink':    'e',
\  'options': '-m -x +s',
\  'down':    '40%'})

map <C-p> :Files<CR>
map <C-b> :Buffers<CR>
map <C-_> :Ag<CR>
"map <C-m> :FZFMru<CR>

" }}}

" Easy align {{{
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" CSV {{{
hi CSVColumnEven ctermbg=0
hi CSVColumnOdd  ctermbg=0
"let g:csv_autocmd_arrange = 1
"let g:csv_autocmd_arrange_size = 1024*1024
let g:csv_nomap_cr = 1
let g:csv_highlight_column = 'y'

"aug CSV_Editing
		"au!
		"au BufRead,BufWritePost *.csv :%ArrangeColumn
		"au BufWritePre *.csv :%UnArrangeColumn
"aug end
" }}}

" FSWITCH {{{
aug FSWITCH
  au!
  au! BufEnter *.js let b:fswitchdst = 'js' | :let b:fswitchfnames = '/$/.spec/' | let b:fswitchlocs = './'
  au! BufEnter *.spec.js let b:fswitchdst = 'js' | :let b:fswitchfnames = '/.spec$//'| let b:fswitchlocs = './'
aug end

nnoremap <leader>A :FSHere<CR>
" }}}

" FLOW {{{
"let g:flow#enable = 0
"let g:flow#autoclose = 1
" }}}

" ALE {{{
let g:ale_linters = {
      \ 'sh' : ['shellcheck'],
      \ 'vim' : ['vint'],
      \ 'html' : ['tidy'],
      \ 'python' : ['flake8'],
      \ 'markdown' : ['mdl'],
      \ 'javascript' : ['eslint'],
      \ 'javascript.jsx' : ['eslint'],
      \}

let g:ale_fixers = {
\   'javascript': ['eslint'],
\}

" If emoji not loaded, use default sign
try
  let g:ale_sign_error = emoji#for('boom')
  let g:ale_sign_warning = emoji#for('small_orange_diamond')
catch
  " Use same sign and distinguish error and warning via different colors.
  let g:ale_sign_error = '•'
  let g:ale_sign_warning = '•'
endtry
let g:ale_echo_msg_format = '[#%linter%#] %s [%severity%]'
let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']
let g:ale_change_sign_column_color=1

"hi ALESignColumnWithErrors ctermbg=DarkRed
" }}}

" EMOJI {{{
"set completefunc=emoji#complete
"let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
"let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
"let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
"let g:gitgutter_sign_modified_removed = emoji#for('collision')
" }}}

" LightLine {{{

let g:lightline = {
  \   'colorscheme': 'solarized',
  \   'active': {
  \     'left': [ [ 'mode' ], [ 'pwd' ] ],
  \     'right': [ [ 'linter_errors', 'linter_warnings', 'trailing', 'lineinfo' ], [ 'fileinfo' ] ],
  \   },
  \   'inactive': {
  \     'left': [ [ 'pwd' ] ],
  \     'right': [ [ 'lineinfo' ], [ 'fileinfo' ] ],
  \   },
  \   'tabline': {
  \     'left': [ [ 'buffers' ] ]
  \   },
  \   'mode_map': {
  \     'n' : 'N',
  \     'i' : 'I',
  \     'R' : 'R',
  \     'v' : 'V',
  \     'V' : 'V-LINE',
  \     "\<C-v>": 'V-BLOCK',
  \     'c' : 'C',
  \     's' : 'S',
  \     'S' : 'S-LINE',
  \     "\<C-s>": 'S-BLOCK',
  \     't': '',
  \   },
  \   'component': {
  \     'lineinfo': '%l:%-v',
  \   },
  \   'separator': { 'left': '', 'right': '' },
  \   'subseparator': { 'left': '', 'right': '' },
  \   'component_expand': {
  \     'buffers': 'lightline#bufferline#buffers',
  \     'trailing': 'lightline#trailing_whitespace#component',
  \     'linter_warnings': 'lightline#ale#warnings',
  \     'linter_errors': 'lightline#ale#errors',
  \   },
  \   'component_function': {
  \     'pwd': 'LightlineWorkingDirectory',
  \     'fileinfo': 'LightlineFileinfo',
  \   },
  \   'component_type': {
  \     'buffers': 'tabsel',
  \     'linter_warnings': 'warning',
  \     'linter_errors': 'error',
  \   }
  \ }

function! LightlineFileinfo()
  if winwidth(0) < 90
    return ''
  endif

  let encoding = &fenc !=# "" ? &fenc : &enc
  let format = &ff
  let type = &ft !=# "" ? &ft : "no ft"
  return type . ' | ' . format . ' | ' . encoding
endfunction

function! LightlineWorkingDirectory()
  return &ft =~ 'help\|qf' ? '' : fnamemodify(getcwd(), ":~:.")
endfunction
" }}}


"""" Lightline ALE
let g:lightline#ale#indicator_warnings = ' '
let g:lightline#ale#indicator_errors = ' '

"""" lightline-bufferline
let g:lightline#bufferline#filename_modifier = ':~:.' " Show filename relative to current directory
let g:lightline#bufferline#unicode_symbols = 1        " Use fancy unicode symbols for various indicators
let g:lightline#bufferline#modified = ''             " Default pencil is too ugly
let g:lightline#bufferline#unnamed = '[No Name]'      " Default name when no buffer is opened
let g:lightline#bufferline#shorten_path = 1           " compress ~/my/folder/name to ~/m/f/n

""" buftabline

let g:buftabline_separators = 0
let g:buftabline_indicators = 1

" DelimitMate {{{
au FileType cpp let b:delimitMate_matchpairs_list = [['(', ')'], ['{', '}'], ['[', ']']]
au FileType cpp,javascript.jsx let b:delimitMate_expand_cr = 2
" }}}

" Prettier {{{
let g:prettier#exec_cmd_async = 1
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md PrettierAsync
" }}}

" Typescript server {{{
if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
      \ 'name': 'typescript-language-server',
      \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
      \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
      \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx']
      \ })
endif

if executable('docker-langserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'whitelist': ['dockerfile'],
        \ })
endif

if executable('pyls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('css-languageserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'css-languageserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
        \ 'whitelist': ['css', 'less', 'sass'],
        \ })
endif

call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
\ 'name': 'omni',
\ 'whitelist': ['*'],
\ 'blacklist': ['html'],
\ 'completor': function('asyncomplete#sources#omni#completor')
\  }))
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necosyntax#get_source_options({
    \ 'name': 'necosyntax',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#necosyntax#completor'),
    \ }))

let g:lsp_async_completion = 1

autocmd FileType typescript,javascript.jsx setlocal omnifunc=lsp#complete

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
imap <c-space> <Plug>(asyncomplete_force_refresh)

"let g:asyncomplete_auto_popup = 0

"function! s:check_back_space() abort
    "let col = col('.') - 1
    "return !col || getline('.')[col - 1]  =~ '\s'
"endfunction

"inoremap <silent><expr> <TAB>
  "\ pumvisible() ? "\<C-n>" :
  "\ <SID>check_back_space() ? "\<TAB>" :
  "\ asyncomplete#force_refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

let g:asyncomplete_remove_duplicates = 1

" don't show the preview window
"set completeopt-=preview

" auto close preview window when the completion is done
"autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
" }}}
